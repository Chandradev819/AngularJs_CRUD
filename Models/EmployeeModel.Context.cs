//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AngularCRUD.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Database1Entities : DbContext
    {
        public Database1Entities()
            : base("name=Database1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Employee> Employees { get; set; }
        public DbSet<tblDept> tblDepts { get; set; }
    
        public virtual int DeleteDept(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDept", idParameter);
        }
    
        public virtual ObjectResult<tblDept> FetchDept_OnId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblDept>("FetchDept_OnId", idParameter);
        }
    
        public virtual ObjectResult<tblDept> FetchDept_OnId(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblDept>("FetchDept_OnId", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<tblDept> FetchDeptDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblDept>("FetchDeptDetails");
        }
    
        public virtual ObjectResult<tblDept> FetchDeptDetails(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblDept>("FetchDeptDetails", mergeOption);
        }
    
        public virtual int InsertDept(string deptName, string deptDesc)
        {
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            var deptDescParameter = deptDesc != null ?
                new ObjectParameter("DeptDesc", deptDesc) :
                new ObjectParameter("DeptDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDept", deptNameParameter, deptDescParameter);
        }
    
        public virtual int UpdateDept(Nullable<int> id, string deptName, string deptDesc)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            var deptDescParameter = deptDesc != null ?
                new ObjectParameter("DeptDesc", deptDesc) :
                new ObjectParameter("DeptDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDept", idParameter, deptNameParameter, deptDescParameter);
        }
    }
}
